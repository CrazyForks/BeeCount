name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Release tag (手动运行可自定义，留空则使用 manual-<short_sha>)"
        required: false
        default: ""
      release_name:
        description: "Release 名称（可选，默认与 tag 相同）"
        required: false
        default: ""
      prerelease:
        description: "是否标记为 Pre-release（手动运行默认 true）"
        required: false
        default: "false"
      create_release:
        description: "是否创建 GitHub Release（手动运行可设为 false，仅构建与产出 Actions Artifacts）"
        required: false
        default: "true"

permissions:
  contents: write

env:
  FLUTTER_VERSION: "3.27.3"

jobs:
  check-branch:
    name: Check if main branch
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Check branch
        run: |
          if [ "${{ github.ref_name }}" != "main" ]; then
            echo "❌ Release workflow can only be triggered from main branch"
            echo "Current branch: ${{ github.ref_name }}"
            exit 1
          fi
          echo "✅ Branch check passed: ${{ github.ref_name }}"

  android:
    name: Android (APK + AAB)
    runs-on: ubuntu-latest
    needs: [check-branch]
    if: always() && (needs.check-branch.result == 'success' || github.event_name == 'push')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Prepare release metadata
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          IS_TAG="false"
          TAG_NAME=""
          if [[ "${GITHUB_REF:-}" == refs/tags/* ]]; then
            IS_TAG="true"
            TAG_NAME="${GITHUB_REF#refs/tags/}"
          fi
          if [[ -z "$TAG_NAME" ]]; then
            INPUT_TAG="${{ github.event.inputs.tag_name || '' }}"
            if [[ -n "$INPUT_TAG" ]]; then
              TAG_NAME="$INPUT_TAG"
            else
              SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
              TAG_NAME="manual-${SHORT_SHA}"
            fi
          fi
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android build-tools and platforms
        run: |
          sdkmanager --install "platform-tools" "platforms;android-35" "build-tools;35.0.0"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: Flutter pub get
        run: flutter pub get

      - name: Setup Android signing from secrets (optional)
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          set -euo pipefail
          if [ -n "${ANDROID_KEYSTORE_BASE64:-}" ]; then
            echo "Writing Android keystore from secret..."
            mkdir -p android/app
            echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > android/app/ci-release.keystore
            printf '%s\n' \
              'storeFile=ci-release.keystore' \
              "storePassword=${ANDROID_KEYSTORE_PASSWORD}" \
              "keyAlias=${ANDROID_KEY_ALIAS}" \
              "keyPassword=${ANDROID_KEY_PASSWORD}" \
              > android/key.properties
            echo "key.properties created."
          else
            echo "No Android signing secrets provided; will use fallback CI keystore in Gradle."
          fi

      - name: Check Supabase secrets
        run: |
          test -n "${{ secrets.SUPABASE_URL }}" || (echo "Missing SUPABASE_URL" >&2; exit 1)
          test -n "${{ secrets.SUPABASE_ANON_KEY }}" || (echo "Missing SUPABASE_ANON_KEY" >&2; exit 1)

      - name: Print define length (debug, safe)
        run: |
          export SUPABASE_URL='${{ secrets.SUPABASE_URL }}'
          export SUPABASE_ANON_KEY='${{ secrets.SUPABASE_ANON_KEY }}'
          echo "SUPABASE_URL length: ${#SUPABASE_URL}"
          echo "SUPABASE_ANON_KEY length: ${#SUPABASE_ANON_KEY}"

      - name: Build APK (release)
        run: |
          export SUPABASE_URL='${{ secrets.SUPABASE_URL }}'
          export SUPABASE_ANON_KEY='${{ secrets.SUPABASE_ANON_KEY }}'
          export CI_VERSION='${{ steps.meta.outputs.tag_name }}'
          export GIT_COMMIT='${{ github.sha }}'
          export BUILD_TIME='${{ github.run_id }}'
          echo "Debug: CI_VERSION=$CI_VERSION"
          echo "Debug: TAG_NAME=${{ steps.meta.outputs.tag_name }}"
          flutter build apk --release --flavor prod \
            --dart-define=SUPABASE_URL="$SUPABASE_URL" \
            --dart-define=SUPABASE_ANON_KEY="$SUPABASE_ANON_KEY" \
            --dart-define=CI_VERSION="$CI_VERSION" \
            --dart-define=GIT_COMMIT="$GIT_COMMIT" \
            --dart-define=BUILD_TIME="$BUILD_TIME"

      - name: Build App Bundle (AAB)
        run: |
          export SUPABASE_URL='${{ secrets.SUPABASE_URL }}'
          export SUPABASE_ANON_KEY='${{ secrets.SUPABASE_ANON_KEY }}'
          export CI_VERSION='${{ steps.meta.outputs.tag_name }}'
          export GIT_COMMIT='${{ github.sha }}'
          export BUILD_TIME='${{ github.run_id }}'
          flutter build appbundle --release --flavor prod \
            --dart-define=SUPABASE_URL="$SUPABASE_URL" \
            --dart-define=SUPABASE_ANON_KEY="$SUPABASE_ANON_KEY" \
            --dart-define=CI_VERSION="$CI_VERSION" \
            --dart-define=GIT_COMMIT="$GIT_COMMIT" \
            --dart-define=BUILD_TIME="$BUILD_TIME"

      - name: List Android outputs (debug)
        run: |
          echo "== build/app/outputs =="
          ls -R build/app/outputs || true
          echo "== flutter-apk =="
          ls -la build/app/outputs/flutter-apk || true
          echo "== bundle =="
          ls -R build/app/outputs/bundle || true

      - name: Rename Android artifacts with version
        run: |
          VERSION="${{ steps.meta.outputs.tag_name }}"
          cd build/app/outputs
          # 重命名 APK
          if [ -f flutter-apk/app-prod-release.apk ]; then
            mv flutter-apk/app-prod-release.apk flutter-apk/beecount-${VERSION}.apk
            echo "Renamed APK to: beecount-${VERSION}.apk"
          fi
          # 重命名 AAB
          if [ -f bundle/prodRelease/app-prod-release.aab ]; then
            mv bundle/prodRelease/app-prod-release.aab bundle/prodRelease/beecount-${VERSION}.aab
            echo "Renamed AAB to: beecount-${VERSION}.aab"
          fi
          echo "=== Final Android artifacts ==="
          find . -name "*.apk" -o -name "*.aab"

      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android
          if-no-files-found: error
          path: |
            build/app/outputs/flutter-apk/beecount-*.apk
            build/app/outputs/bundle/prodRelease/beecount-*.aab

  ios:
    name: iOS (app.zip + unsigned .ipa)
    runs-on: macos-latest
    needs: [check-branch]
    if: always() && (needs.check-branch.result == 'success' || github.event_name == 'push')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Prepare release metadata
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          IS_TAG="false"
          TAG_NAME=""
          if [[ "${GITHUB_REF:-}" == refs/tags/* ]]; then
            IS_TAG="true"
            TAG_NAME="${GITHUB_REF#refs/tags/}"
          fi
          if [[ -z "$TAG_NAME" ]]; then
            INPUT_TAG="${{ github.event.inputs.tag_name || '' }}"
            if [[ -n "$INPUT_TAG" ]]; then
              TAG_NAME="$INPUT_TAG"
            else
              SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
              TAG_NAME="manual-${SHORT_SHA}"
            fi
          fi
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: Flutter pub get
        run: flutter pub get

      - name: Check Supabase secrets
        run: |
          test -n "${{ secrets.SUPABASE_URL }}" || (echo "Missing SUPABASE_URL" >&2; exit 1)
          test -n "${{ secrets.SUPABASE_ANON_KEY }}" || (echo "Missing SUPABASE_ANON_KEY" >&2; exit 1)

      - name: Print define length (debug, safe)
        run: |
          export SUPABASE_URL='${{ secrets.SUPABASE_URL }}'
          export SUPABASE_ANON_KEY='${{ secrets.SUPABASE_ANON_KEY }}'
          echo "SUPABASE_URL length: ${#SUPABASE_URL}"
          echo "SUPABASE_ANON_KEY length: ${#SUPABASE_ANON_KEY}"

      - name: Build iOS (no codesign)
        run: |
          export SUPABASE_URL='${{ secrets.SUPABASE_URL }}'
          export SUPABASE_ANON_KEY='${{ secrets.SUPABASE_ANON_KEY }}'
          export CI_VERSION='${{ steps.meta.outputs.tag_name }}'
          export GIT_COMMIT='${{ github.sha }}'
          export BUILD_TIME='${{ github.run_id }}'
          flutter build ios --release --no-codesign \
            --dart-define=SUPABASE_URL="$SUPABASE_URL" \
            --dart-define=SUPABASE_ANON_KEY="$SUPABASE_ANON_KEY" \
            --dart-define=CI_VERSION="$CI_VERSION" \
            --dart-define=GIT_COMMIT="$GIT_COMMIT" \
            --dart-define=BUILD_TIME="$BUILD_TIME"

      - name: Build iOS (debug simulator, unsigned)
        run: |
          export SUPABASE_URL='${{ secrets.SUPABASE_URL }}'
          export SUPABASE_ANON_KEY='${{ secrets.SUPABASE_ANON_KEY }}'
          export CI_VERSION='${{ steps.meta.outputs.tag_name }}'
          export GIT_COMMIT='${{ github.sha }}'
          export BUILD_TIME='${{ github.run_id }}'
          flutter build ios --debug --simulator \
            --dart-define=SUPABASE_URL="$SUPABASE_URL" \
            --dart-define=SUPABASE_ANON_KEY="$SUPABASE_ANON_KEY" \
            --dart-define=CI_VERSION="$CI_VERSION" \
            --dart-define=GIT_COMMIT="$GIT_COMMIT" \
            --dart-define=BUILD_TIME="$BUILD_TIME"

      - name: Package iOS Runner.app (unsigned)
        run: |
          set -euo pipefail
          VERSION="${{ steps.meta.outputs.tag_name }}"
          APP_PATH="build/ios/iphoneos/Runner.app"
          if [ ! -d "$APP_PATH" ]; then
            echo "Runner.app not found at $APP_PATH" >&2
            ls -la build/ios/iphoneos || true
            exit 1
          fi
          # 生成包含版本号的文件名
          ditto -c -k --sequesterRsrc --keepParent "$APP_PATH" beecount-${VERSION}-iphoneos.app.zip
          mkdir -p Payload
          cp -R "$APP_PATH" Payload/
          /usr/bin/zip -qry beecount-${VERSION}-unsigned.ipa Payload
          echo "Generated iOS artifacts:"
          ls -la beecount-${VERSION}-*

      - name: Package iOS Simulator Runner.app (debug, unsigned)
        run: |
          set -euo pipefail
          VERSION="${{ steps.meta.outputs.tag_name }}"
          SIM_APP_PATH="build/ios/iphonesimulator/Runner.app"
          if [ -d "$SIM_APP_PATH" ]; then
            ditto -c -k --sequesterRsrc --keepParent "$SIM_APP_PATH" beecount-${VERSION}-iphonesimulator.app.zip
            echo "Generated iOS Simulator artifact: beecount-${VERSION}-iphonesimulator.app.zip"
          else
            echo "Simulator Runner.app not found at $SIM_APP_PATH" >&2
            ls -la build/ios/iphonesimulator || true
          fi

      - name: Upload iOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios
          path: |
            beecount-*-iphoneos.app.zip
            beecount-*-unsigned.ipa
            beecount-*-iphonesimulator.app.zip

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs:
      - check-branch
      - android
      - ios
    if: always() && (needs.check-branch.result == 'success' || github.event_name == 'push') && needs.android.result == 'success' && needs.ios.result == 'success'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Ensure tags are fetched
        run: |
          git fetch --tags --force || true

      - name: Prepare release metadata
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          IS_TAG="false"
          TAG_NAME=""
          if [[ "${GITHUB_REF:-}" == refs/tags/* ]]; then
            IS_TAG="true"
            TAG_NAME="${GITHUB_REF#refs/tags/}"
          fi
          if [[ -z "$TAG_NAME" ]]; then
            INPUT_TAG="${{ github.event.inputs.tag_name || '' }}"
            if [[ -n "$INPUT_TAG" ]]; then
              TAG_NAME="$INPUT_TAG"
            else
              SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
              TAG_NAME="manual-${SHORT_SHA}"
            fi
          fi
          # 手动触发默认 prerelease=true；tag 触发默认 false
          INPUT_PRERELEASE="${{ github.event.inputs.prerelease || '' }}"
          if [[ "$IS_TAG" == "true" ]]; then
            PRERELEASE="false"
          else
            PRERELEASE=${INPUT_PRERELEASE:-true}
          fi
          # 是否创建 Release
          INPUT_CREATE="${{ github.event.inputs.create_release || '' }}"
          if [[ "$IS_TAG" == "true" ]]; then
            CREATE_RELEASE="true"
          else
            CREATE_RELEASE=${INPUT_CREATE:-false}
          fi
          RELEASE_NAME_INPUT="${{ github.event.inputs.release_name || '' }}"
          if [[ -n "$RELEASE_NAME_INPUT" ]]; then
            RELEASE_NAME="$RELEASE_NAME_INPUT"
          else
            RELEASE_NAME="$TAG_NAME"
          fi
          echo "is_tag=$IS_TAG" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "prerelease=$PRERELEASE" >> $GITHUB_OUTPUT
          echo "create_release=$CREATE_RELEASE" >> $GITHUB_OUTPUT
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
      - name: Download Android artifacts
        uses: actions/download-artifact@v4
        with:
          name: android
          path: ./dist/android

      - name: List downloaded artifacts (debug)
        run: |
          echo "== dist tree =="
          ls -R ./dist || true

      - name: Download iOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: ios
          path: ./dist/ios

      - name: Generate release notes
        id: notes
        run: |
          TAG="${{ steps.meta.outputs.tag_name }}"
          # 获取上一个 tag（不含当前 tag）
          PREV_TAG=$(git tag --list --sort=-version:refname | grep -v "^${TAG}$" | head -n1)
          echo "Current tag: $TAG"
          echo "Previous tag: $PREV_TAG"
          # 生成 commit 列表（排除 merge commit）
          if [ -n "$PREV_TAG" ]; then
            echo "Generating commit log from $PREV_TAG to HEAD"
            COMMITS=$(git log --no-merges --pretty=format:"- %s ([%h](https://github.com/${GITHUB_REPOSITORY}/commit/%H))" "$PREV_TAG"..HEAD)
          else
            echo "No previous tag found, showing all commits"
            COMMITS=$(git log --no-merges --pretty=format:"- %s ([%h](https://github.com/${GITHUB_REPOSITORY}/commit/%H))")
          fi
          cat > RELEASE_NOTES.md <<EOF

          ## 变更记录
          $COMMITS

          EOF
          echo "notes_file=RELEASE_NOTES.md" >> $GITHUB_OUTPUT

      - name: Create Release
        if: ${{ steps.meta.outputs.create_release == 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.tag_name }}
          name: ${{ steps.meta.outputs.release_name }}
          prerelease: ${{ steps.meta.outputs.prerelease == 'true' }}
          body_path: ${{ steps.notes.outputs.notes_file }}
          files: |
            dist/android/**/*.apk
            dist/android/**/*.aab
            dist/ios/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
